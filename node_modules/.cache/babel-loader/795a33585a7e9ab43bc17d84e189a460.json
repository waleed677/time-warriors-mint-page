{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nvar ScanOperator = function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n\n  return ScanOperator;\n}();\n\nvar ScanSubscriber = function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  };\n\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/scan.ts"],"names":[],"mappings":";AAEA,OAAO,KAAE,OAAT,MAAqB,OAArB;AAoDA,SAAM,UAAN,QAA2B,eAA3B;AACE,OAAA,SAAW,IAAX,CAAc,WAAd,EAAoB,IAApB,EAAoB;AAMpB,MAAI,OAAA,GAAU,KAAd;;MACE,SAAO,CAAG,MAAV,IAAe,C,EAAA;AAChB,IAAA,OAAA,GAAA,IAAA;AAED;;AACE,SAAA,SAAO,oBAAP,CAAuB,MAAvB,EAAoC;AACpC,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AACH,GAFG;AAIJ;;IACE,YAAA,GAAoB,YAAmF;AAAA,WAAA,YAAA,CAAA,WAAA,EAAA,IAAA,EAAA,OAAA,EAAwB;AAA3G,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAA6D,MAAA,OAAA,GAAA,KAAA;AAAsB;;AAA4B,SAAA,WAAA,GAAA,WAAA;AAEnI,SAAA,IAAA,GAAA,IAAA;AACE,SAAA,OAAA,GAAc,OAAd;AACD;;AACH,EAAA,YAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA,cAAA,CAAA,UAAA,EAAA,KAAA,WAAA,EAAA,KAAA,IAAA,EAAA,KAAA,OAAA,CAAA,CAAA;AAOD,GAPA;;AAOmC,SAAA,YAAA;AAYjC,CAxBoB,E;;IAwBpB,cAAA,GAEE,UAAM,MAAN,EAAkB;AAF4B,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAA6D,WAAA,cAAA,CAAY,WAAZ,EAAY,WAAZ,EAAY,KAAZ,EAAY,OAAZ,EAAY;AACrG,QAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAgB,IAAhB,EAAgB,WAAhB,KAAgB,IAAhB;;AAZZ,IAAA,KAAA,CAAA,WAAA,GAAkB,WAAlB;;AAcP,IAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AAZD,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA;AAAA,WAAA,KAAA;AACE;;AACF,EAAA,MAAC,CAAA,cAAD,CAAC,cAAA,CAAA,SAAD,EAAC,MAAD,EAAC;SAED,YAAS;AACP,aAAK,KAAO,KAAZ;AACA,KAJD;AAKD,IAAA,GAAC,EAAA,UAAA,KAAA,EAAA;;;AALA,KAAA;AAYS,IAAA,UAAA,EAAV,IAZC;AAaC,IAAA,YAAU,EAAA;AAbX,GAAD;;AAeI,EAAA,cAAK,CAAA,SAAL,CAAiB,KAAjB,GAAsB,UAAO,KAAP,EAAO;AAC9B,QAAA,CAAA,KAAA,OAAA,EAAA;AAAM,WAAA,IAAA,GAAA,KAAA;AACL,WAAA,WAAA,CAAY,IAAZ,CAAqB,KAArB;AACD,KAFA,MAGF;AAEO,aAAA,KAAA,QAAA,CAAR,KAAQ,CAAA;AACN;AACA,GARE;;AASF,EAAA,cAAI,CAAA,SAAJ,CAAI,QAAJ,GAAI,UAAA,KAAA,EAAA;QACF,KAAA,GAAM,KAAO,KAAP,E;AACP,QAAA,MAAA;;AAAC,QAAA;AACA,MAAA,MAAK,GAAA,KAAA,WAAA,CAAqB,KAAE,IAAvB,EAAuB,KAAvB,EAAuB,KAAvB,CAAL;AACD,KAFC,CAGF,OAAK,GAAL,EAAY;AACR,WAAC,WAAD,CAAiB,KAAjB,CAAkB,GAAlB;AACL;;AACH,SAAA,IAAA,GAAA,MAAA;AArCmC,SAAU,WAAV,CAqClC,IArCkC,CAqClC,MArCkC;GA6B/B;;;CAfA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nexport function scan(accumulator, seed) {\r\n    var hasSeed = false;\r\n    if (arguments.length >= 2) {\r\n        hasSeed = true;\r\n    }\r\n    return function scanOperatorFunction(source) {\r\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\r\n    };\r\n}\r\nvar ScanOperator = /*@__PURE__*/ (function () {\r\n    function ScanOperator(accumulator, seed, hasSeed) {\r\n        if (hasSeed === void 0) {\r\n            hasSeed = false;\r\n        }\r\n        this.accumulator = accumulator;\r\n        this.seed = seed;\r\n        this.hasSeed = hasSeed;\r\n    }\r\n    ScanOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\r\n    };\r\n    return ScanOperator;\r\n}());\r\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(ScanSubscriber, _super);\r\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.accumulator = accumulator;\r\n        _this._seed = _seed;\r\n        _this.hasSeed = hasSeed;\r\n        _this.index = 0;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\r\n        get: function () {\r\n            return this._seed;\r\n        },\r\n        set: function (value) {\r\n            this.hasSeed = true;\r\n            this._seed = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ScanSubscriber.prototype._next = function (value) {\r\n        if (!this.hasSeed) {\r\n            this.seed = value;\r\n            this.destination.next(value);\r\n        }\r\n        else {\r\n            return this._tryNext(value);\r\n        }\r\n    };\r\n    ScanSubscriber.prototype._tryNext = function (value) {\r\n        var index = this.index++;\r\n        var result;\r\n        try {\r\n            result = this.accumulator(this.seed, value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n        }\r\n        this.seed = result;\r\n        this.destination.next(result);\r\n    };\r\n    return ScanSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=scan.js.map\r\n"]},"metadata":{},"sourceType":"module"}