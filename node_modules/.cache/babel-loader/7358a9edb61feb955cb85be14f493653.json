{"ast":null,"code":"import { callWhenDone } from \"../util/promises\";\n/**\n * Returns a \"provider\" which can be passed to the Web3 constructor.\n */\n\nexport function makeAlchemyHttpProvider(sendJsonRpcPayload) {\n  function send(payload, callback) {\n    callWhenDone(sendJsonRpcPayload(payload), callback);\n  }\n\n  return {\n    send: send\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/httpProvider.ts"],"names":[],"mappings":"AAKA,SAAS,YAAT,QAA6B,kBAA7B;AAGA;;AAEG;;AACH,OAAM,SAAU,uBAAV,CACJ,kBADI,EAC0C;AAE9C,WAAS,IAAT,CACE,OADF,EAEE,QAFF,EAE+C;AAE7C,IAAA,YAAY,CAAC,kBAAkB,CAAC,OAAD,CAAnB,EAA8B,QAA9B,CAAZ;AACD;;AACD,SAAO;AAAE,IAAA,IAAI,EAAA;AAAN,GAAP;AACD","sourcesContent":["import {\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  Web3Callback,\n} from \"../types\";\nimport { callWhenDone } from \"../util/promises\";\nimport { SendJsonRpcPayloadFunction } from \"./sendJsonRpcPayload\";\n\n/**\n * Returns a \"provider\" which can be passed to the Web3 constructor.\n */\nexport function makeAlchemyHttpProvider(\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n) {\n  function send(\n    payload: SingleOrBatchRequest,\n    callback: Web3Callback<SingleOrBatchResponse>,\n  ): void {\n    callWhenDone(sendJsonRpcPayload(payload), callback);\n  }\n  return { send };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}