{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nvar TakeLastOperator = function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n\n  return TakeLastOperator;\n}();\n\nvar TakeLastSubscriber = function (_super) {\n  tslib_1.__extends(TakeLastSubscriber, _super);\n\n  function TakeLastSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  };\n\n  return TakeLastSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeLast.ts"],"names":[],"mappings":";AACA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAAS,eAAT;AACA,SAAS,uBAAT,QAAsB,iCAAtB;AA8CA,SAAM,KAAN,QAAgB,qBAAhB;AACE,OAAA,SAAO,QAAP,CAAgB,KAAhB,EAAgB;AACd,SAAA,SAAS,wBAAT,CAAiB,MAAjB,EAAiB;QACf,KAAA,KAAO,C,EAAK;AACb,aAAA,KAAA,EAAA;AAAM,K,MACL;AACD,aAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,KAAA,CAAA,CAAA;AACD;AACH,GANG;AAQJ;;IACE,gBAAA,GAAiC,YAAA;AAAb,WAAA,gBAAA,CAAa,KAAb,EAAa;AAC/B,SAAI,KAAJ,GAAS,KAAT;;QACE,KAAA,KAAA,GAAU,C,EAAA;AACX,YAAA,IAAA,uBAAA,EAAA;AACF;AAED;;AACE,EAAA,gBAAO,CAAM,SAAb,CAAuB,IAAvB,GAA4B,UAAA,UAAA,EAAmB,MAAnB,EAA+B;AAC5D,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA,kBAAA,CAAA,UAAA,EAAA,KAAA,KAAA,CAAA,CAAA;AACH,GAFI;;AAEH,SAAA,gBAAA;AAOD,CAhBmC,E;;IAgBC,kBAAA,GAAA,UAAa,MAAb,EAAa;AAI/C,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAY,MAAZ;;AAAA,WAAA,kBAAA,CACE,WADF,EACQ,KADR,EACoB;AAD4B,QAAA,KAAA,GAAA,MAAA,CAAK,IAAL,CAAa,IAAb,EAAa,WAAb,KAAa,IAAb;;AAHxC,IAAA,KAAA,CAAA,KAAA,GAAiB,KAAjB;AACA,IAAA,KAAA,CAAA,IAAA,GAAK,IAAa,KAAb,EAAL;;AAIP,WAAA,KAAA;AAED;;AACE,EAAA,kBAAa,CAAI,SAAjB,CAAuB,KAAvB,GAAuB,UAAA,KAAA,EAAA;AACvB,QAAM,IAAA,GAAK,KAAO,IAAlB;AACA,QAAM,KAAK,GAAG,KAAK,KAAnB;AAEA,QAAI,KAAK,GAAA,KAAM,KAAN,EAAT;;QACE,IAAI,CAAC,MAAL,GAAU,K,EAAO;AAClB,MAAA,IAAA,CAAA,IAAA,CAAA,KAAA;AAAM,K,MACL;AACA,UAAI,KAAC,GAAM,KAAG,GAAM,KAApB;AACD,MAAA,IAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACF;AAED,GAZE;;AAaA,EAAA,kBAAM,CAAW,SAAjB,CAAyB,SAAzB,GAAqC,YAAA;AACrC,QAAI,WAAQ,GAAK,KAAM,WAAvB;AAEA,QAAI,KAAK,GAAG,KAAG,KAAf;;QACE,KAAM,GAAA,C,EAAK;AACX,UAAM,KAAI,GAAI,KAAK,KAAL,IAAU,KAAA,KAAV,GAAU,KAAA,KAAV,GAAU,KAAA,KAAxB;AAEA,UAAA,IAAK,GAAK,KAAM,IAAhB;;AACE,WAAA,IAAM,CAAA,GAAG,CAAT,EAAa,CAAA,GAAK,KAAlB,EAAwB,CAAA,EAAxB,EAA8B;AAC9B,YAAA,GAAA,GAAW,KAAK,EAAhB,GAAsB,KAAtB;AACD,QAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACF;AAED;;AACD,IAAA,WAAA,CAAA,QAAA;AACH,GAfI;;AAtBgC,SAAA,kBAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { empty } from '../observable/empty';\r\nexport function takeLast(count) {\r\n    return function takeLastOperatorFunction(source) {\r\n        if (count === 0) {\r\n            return empty();\r\n        }\r\n        else {\r\n            return source.lift(new TakeLastOperator(count));\r\n        }\r\n    };\r\n}\r\nvar TakeLastOperator = /*@__PURE__*/ (function () {\r\n    function TakeLastOperator(total) {\r\n        this.total = total;\r\n        if (this.total < 0) {\r\n            throw new ArgumentOutOfRangeError;\r\n        }\r\n    }\r\n    TakeLastOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\r\n    };\r\n    return TakeLastOperator;\r\n}());\r\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(TakeLastSubscriber, _super);\r\n    function TakeLastSubscriber(destination, total) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.total = total;\r\n        _this.ring = new Array();\r\n        _this.count = 0;\r\n        return _this;\r\n    }\r\n    TakeLastSubscriber.prototype._next = function (value) {\r\n        var ring = this.ring;\r\n        var total = this.total;\r\n        var count = this.count++;\r\n        if (ring.length < total) {\r\n            ring.push(value);\r\n        }\r\n        else {\r\n            var index = count % total;\r\n            ring[index] = value;\r\n        }\r\n    };\r\n    TakeLastSubscriber.prototype._complete = function () {\r\n        var destination = this.destination;\r\n        var count = this.count;\r\n        if (count > 0) {\r\n            var total = this.count >= this.total ? this.total : this.count;\r\n            var ring = this.ring;\r\n            for (var i = 0; i < total; i++) {\r\n                var idx = (count++) % total;\r\n                destination.next(ring[idx]);\r\n            }\r\n        }\r\n        destination.complete();\r\n    };\r\n    return TakeLastSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=takeLast.js.map\r\n"]},"metadata":{},"sourceType":"module"}