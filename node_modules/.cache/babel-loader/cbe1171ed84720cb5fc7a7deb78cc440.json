{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\n\nvar CountOperator = function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return CountOperator;\n}();\n\nvar CountSubscriber = function (_super) {\n  tslib_1.__extends(CountSubscriber, _super);\n\n  function CountSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":";AAGA,OAAO,KAAE,OAAT,MAAqB,OAArB;AA6DA,SAAM,UAAN,QAAyB,eAAzB;AACE,OAAA,SAAO,KAAP,CAAQ,SAAR,EAAkC;AACnC,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,aAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAED;;IACE,aAAA,GAAoB,YACsB;AADtB,WAAA,aAAA,CAAA,SAAA,EAAuE,MAAvE,EAAuE;AACvE,SAAA,SAAA,GAAA,SAAA;AACnB,SAAA,MAAA,GAAA,MAAA;AAED;;AACE,EAAA,aAAO,CAAA,SAAP,CAAc,IAAd,GAAwB,UAAI,UAAJ,EAAoB,MAApB,EAAgC;AACzD,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA,eAAA,CAAA,UAAA,EAAA,KAAA,SAAA,EAAA,KAAA,MAAA,CAAA,CAAA;AACH,GAFI;;AAEH,SAAA,aAAA;AAOD,CAdsB,E;;IAcW,eAAA,GAAA,UAAa,MAAb,EAAa;AAI5C,EAAA,OAAA,CAAA,SAAA,CAAA,eAAA,EAAY,MAAZ;;AAAA,WAAA,eAAA,CAGE,WAHF,EAGQ,SAHR,EAGoB,MAHpB,EAIC;AAHmB,QAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAuE,WAAvE,KAAuE,IAAvE;;AACA,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AALZ,IAAA,KAAA,CAAA,MAAA,GAAiB,MAAjB;AACA,IAAA,KAAA,CAAA,KAAA,GAAgB,CAAhB;;AAMP,WAAA,KAAA;AAED;;AACE,EAAA,eAAS,CAAA,SAAT,CAAoB,KAApB,GAAoB,UAAA,KAAA,EAAA;QAClB,KAAK,S,EAAA;AACN,WAAA,aAAA,CAAA,KAAA;AAAM,K,MACL;AACD,WAAA,KAAA;AACF;AAED,GAPE;;AAQA,EAAA,eAAgB,CAAA,SAAhB,CAAgB,aAAhB,GAAgB,UAAA,KAAA,EAAA;AAEhB,QAAI,MAAJ;;QACE;AACD,MAAA,MAAA,GAAA,KAAA,SAAA,CAAA,KAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,MAAA,CAAA;AAAC,K,CACA,OAAA,GAAA,EAAK;AACL,WAAA,WAAA,CAAO,KAAP,CAAO,GAAP;AACD;AAED;;QACE,M,EAAK;AACN,WAAA,KAAA;AACF;AAED,GAdE;;AAeA,EAAA,eAAK,CAAA,SAAL,CAAsB,SAAtB,GAAkC,YAAA;AAClC,SAAK,WAAL,CAAiB,IAAjB,CAAiB,KAAU,KAA3B;AACD,SAAA,WAAA,CAAA,QAAA;AACH,GAHI;;AAlC6B,SAAA,eAAA;CAAA,C,UAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nexport function count(predicate) {\r\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\r\n}\r\nvar CountOperator = /*@__PURE__*/ (function () {\r\n    function CountOperator(predicate, source) {\r\n        this.predicate = predicate;\r\n        this.source = source;\r\n    }\r\n    CountOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\r\n    };\r\n    return CountOperator;\r\n}());\r\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(CountSubscriber, _super);\r\n    function CountSubscriber(destination, predicate, source) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.predicate = predicate;\r\n        _this.source = source;\r\n        _this.count = 0;\r\n        _this.index = 0;\r\n        return _this;\r\n    }\r\n    CountSubscriber.prototype._next = function (value) {\r\n        if (this.predicate) {\r\n            this._tryPredicate(value);\r\n        }\r\n        else {\r\n            this.count++;\r\n        }\r\n    };\r\n    CountSubscriber.prototype._tryPredicate = function (value) {\r\n        var result;\r\n        try {\r\n            result = this.predicate(value, this.index++, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            this.count++;\r\n        }\r\n    };\r\n    CountSubscriber.prototype._complete = function () {\r\n        this.destination.next(this.count);\r\n        this.destination.complete();\r\n    };\r\n    return CountSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=count.js.map\r\n"]},"metadata":{},"sourceType":"module"}