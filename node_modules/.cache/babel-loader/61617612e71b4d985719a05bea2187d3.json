{"ast":null,"code":"/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nexport function subscribeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return function subscribeOnOperatorFunction(source) {\n    return source.lift(new SubscribeOnOperator(scheduler, delay));\n  };\n}\n\nvar SubscribeOnOperator = function () {\n  function SubscribeOnOperator(scheduler, delay) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  SubscribeOnOperator.prototype.call = function (subscriber, source) {\n    return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n  };\n\n  return SubscribeOnOperator;\n}();","map":{"version":3,"sources":["../../../src/internal/operators/subscribeOn.ts"],"names":[],"mappings":"AAGA;AA6CA,SAAM,qBAAN,QAAuD,qCAAvD;AAAyD,OAAA,SAAA,WAAA,CAAA,SAAA,EAAiB,KAAjB,EAAiB;AACxE,MAAA,KAAO,KAAA,KAAS,CAAhB,EAAgB;AACd,IAAA,KAAA,GAAO,CAAP;AACD;;AACF,SAAA,SAAA,2BAAA,CAAA,MAAA,EAAA;AAED,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,mBAAA,CAAA,SAAA,EAAA,KAAA,CAAA,CAAA;AACE,GAHD;AAGqB;;IACA,mBAAA,GAAa,YAAA;AACjC,WAAC,mBAAD,CAAC,SAAD,EAAC,KAAD,EAAC;AACD,SAAA,SAAA,GAAA,SAAA;AACE,SAAA,KAAA,GAAW,KAAX;AAGD;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAC,IAAD,GAAC,UAAA,UAAA,EAAA,MAAA,EAAA;AAAA,WAAA,IAAA,qBAAA,CAAA,MAAA,EAAA,KAAA,KAAA,EAAA,KAAA,SAAA,EAAA,SAAA,CAAA,UAAA,CAAA;GAAD;;;CAPmC,E","sourcesContent":["/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */\r\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\r\nexport function subscribeOn(scheduler, delay) {\r\n    if (delay === void 0) {\r\n        delay = 0;\r\n    }\r\n    return function subscribeOnOperatorFunction(source) {\r\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\r\n    };\r\n}\r\nvar SubscribeOnOperator = /*@__PURE__*/ (function () {\r\n    function SubscribeOnOperator(scheduler, delay) {\r\n        this.scheduler = scheduler;\r\n        this.delay = delay;\r\n    }\r\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\r\n        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\r\n    };\r\n    return SubscribeOnOperator;\r\n}());\r\n//# sourceMappingURL=subscribeOn.js.map\r\n"]},"metadata":{},"sourceType":"module"}