{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\n\nvar TakeUntilOperator = function () {\n  function TakeUntilOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  TakeUntilOperator.prototype.call = function (subscriber, source) {\n    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n\n    return takeUntilSubscriber;\n  };\n\n  return TakeUntilOperator;\n}();\n\nvar TakeUntilSubscriber = function (_super) {\n  tslib_1.__extends(TakeUntilSubscriber, _super);\n\n  function TakeUntilSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.seenValue = false;\n    return _this;\n  }\n\n  TakeUntilSubscriber.prototype.notifyNext = function () {\n    this.seenValue = true;\n    this.complete();\n  };\n\n  TakeUntilSubscriber.prototype.notifyComplete = function () {};\n\n  return TakeUntilSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/takeUntil.ts"],"names":[],"mappings":";AAKA,OAAO,KAAE,OAAT,MAAyB,OAAzB;AA0CA,SAAM,cAAN,EAAyB,qBAAzB,EAAsD,qBAAtD,QAAsD,mBAAtD;AACE,OAAA,SAAO,SAAP,CAAQ,QAAR,EAAkC;AACnC,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,iBAAA,CAAA,QAAA,CAAA,CAAA;AAAA,GAAA;AAED;;IACE,iBAAA,GAA6C,YAAA;AAAzB,WAAA,iBAAA,CAAA,QAAA,EAAyB;AAC5C,SAAA,QAAA,GAAA,QAAA;AAED;;AACE,EAAA,iBAAM,CAAA,SAAN,CAAyB,IAAzB,GAAgC,UAAA,UAAA,EAAoB,MAApB,EAA+B;AAC/D,QAAM,mBAAA,GAAoB,IAAG,mBAAH,CAAuB,UAAvB,CAA1B;AACA,QAAI,oBAAoB,GAAA,cAAK,CAAA,KAAA,QAAA,EAAoB,IAAW,qBAAX,CAAW,mBAAX,CAApB,CAA7B;;QACE,oBAAoB,IAAI,CAAA,mBAAoB,CAAC,S,EAAC;AAC9C,MAAA,mBAAc,CAAA,GAAd,CAAwB,oBAAxB;AACD,aAAA,MAAA,CAAA,SAAA,CAAA,mBAAA,CAAA;AACD;;AACD,WAAA,mBAAA;AACH,GARI;;AAQH,SAAA,iBAAA;AAOD,CAnB+C,E;;IAmBP,mBAAA,GAAA,UAA2B,MAA3B,EAA2B;AAGjE,EAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,EAAY,MAAZ;;AAAA,WAAA,mBAAA,CACE,WADF,EACQ;AAHR,QAAA,KAAA,GAAA,MAAY,CAAA,IAAZ,CAAkB,IAAlB,EAAkB,WAAlB,KAAkB,IAAlB;;;AAIC,WAAA,KAAA;AAED;;AACE,EAAA,mBAAc,CAAA,SAAd,CAAsB,UAAtB,GAAsB,YAAA;AACtB,SAAK,SAAL,GAAgB,IAAhB;AACD,SAAA,QAAA;AAED,GAJE;;AAMF,EAAA,mBAAC,CAAA,SAAD,CAAC,cAAD,GAAC,YAAA,CACH,CADE;;AAdsC,SAAA,mBAAA;CAAA,C,qBAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\r\nexport function takeUntil(notifier) {\r\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\r\n}\r\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\r\n    function TakeUntilOperator(notifier) {\r\n        this.notifier = notifier;\r\n    }\r\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\r\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\r\n        var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\r\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\r\n            takeUntilSubscriber.add(notifierSubscription);\r\n            return source.subscribe(takeUntilSubscriber);\r\n        }\r\n        return takeUntilSubscriber;\r\n    };\r\n    return TakeUntilOperator;\r\n}());\r\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\r\n    tslib_1.__extends(TakeUntilSubscriber, _super);\r\n    function TakeUntilSubscriber(destination) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.seenValue = false;\r\n        return _this;\r\n    }\r\n    TakeUntilSubscriber.prototype.notifyNext = function () {\r\n        this.seenValue = true;\r\n        this.complete();\r\n    };\r\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\r\n    };\r\n    return TakeUntilSubscriber;\r\n}(SimpleOuterSubscriber));\r\n//# sourceMappingURL=takeUntil.js.map\r\n"]},"metadata":{},"sourceType":"module"}