{"ast":null,"code":"var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {\n  // table of character substitutions\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\'\n},\n    rep;\n\nfunction quote(string) {\n  // If the string contains no control characters, no quote characters, and no\n  // backslash characters, then we can safely slap some quotes around it.\n  // Otherwise we must also replace the offending characters with safe escape\n  // sequences.\n  escapable.lastIndex = 0;\n  return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n  }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n  // Produce a string from holder[key].\n  var i,\n      // The loop counter.\n  k,\n      // The member key.\n  v,\n      // The member value.\n  length,\n      mind = gap,\n      partial,\n      value = holder[key]; // If the value has a toJSON method, call it to obtain a replacement value.\n\n  if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n    value = value.toJSON(key);\n  } // If we were called with a replacer function, then call the replacer to\n  // obtain a replacement value.\n\n\n  if (typeof rep === 'function') {\n    value = rep.call(holder, key, value);\n  } // What happens next depends on the value's type.\n\n\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n\n    case 'number':\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n      return isFinite(value) ? String(value) : 'null';\n\n    case 'boolean':\n    case 'null':\n      // If the value is a boolean or null, convert it to a string. Note:\n      // typeof null does not produce 'null'. The case is included here in\n      // the remote chance that this gets fixed someday.\n      return String(value);\n\n    case 'object':\n      if (!value) return 'null';\n      gap += indent;\n      partial = []; // Array.isArray\n\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n        length = value.length;\n\n        for (i = 0; i < length; i += 1) {\n          partial[i] = str(i, value) || 'null';\n        } // Join all of the elements together, separated with commas, and\n        // wrap them in brackets.\n\n\n        v = partial.length === 0 ? '[]' : gap ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' : '[' + partial.join(',') + ']';\n        gap = mind;\n        return v;\n      } // If the replacer is an array, use it to select the members to be\n      // stringified.\n\n\n      if (rep && typeof rep === 'object') {\n        length = rep.length;\n\n        for (i = 0; i < length; i += 1) {\n          k = rep[i];\n\n          if (typeof k === 'string') {\n            v = str(k, value);\n\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } else {\n        // Otherwise, iterate through all of the keys in the object.\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = str(k, value);\n\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } // Join all of the member texts together, separated with commas,\n      // and wrap them in braces.\n\n\n      v = partial.length === 0 ? '{}' : gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' : '{' + partial.join(',') + '}';\n      gap = mind;\n      return v;\n  }\n}\n\nmodule.exports = function (value, replacer, space) {\n  var i;\n  gap = '';\n  indent = ''; // If the space parameter is a number, make an indent string containing that\n  // many spaces.\n\n  if (typeof space === 'number') {\n    for (i = 0; i < space; i += 1) {\n      indent += ' ';\n    }\n  } // If the space parameter is a string, it will be used as the indent string.\n  else if (typeof space === 'string') {\n    indent = space;\n  } // If there is a replacer, it must be a function or an array.\n  // Otherwise, throw an error.\n\n\n  rep = replacer;\n\n  if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n    throw new Error('JSON.stringify');\n  } // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n\n\n  return str('', {\n    '': value\n  });\n};","map":{"version":3,"sources":["E:/Freelancing/blockchain/time-warriors-mint-page/node_modules/jsonify/lib/stringify.js"],"names":["cx","escapable","gap","indent","meta","rep","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","i","k","v","length","mind","partial","value","toJSON","call","isFinite","String","Object","prototype","apply","join","push","hasOwnProperty","module","exports","replacer","space","Error"],"mappings":"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","sourcesContent":["var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\r\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\r\n    gap,\r\n    indent,\r\n    meta = {    // table of character substitutions\r\n        '\\b': '\\\\b',\r\n        '\\t': '\\\\t',\r\n        '\\n': '\\\\n',\r\n        '\\f': '\\\\f',\r\n        '\\r': '\\\\r',\r\n        '\"' : '\\\\\"',\r\n        '\\\\': '\\\\\\\\'\r\n    },\r\n    rep;\r\n\r\nfunction quote(string) {\r\n    // If the string contains no control characters, no quote characters, and no\r\n    // backslash characters, then we can safely slap some quotes around it.\r\n    // Otherwise we must also replace the offending characters with safe escape\r\n    // sequences.\r\n    \r\n    escapable.lastIndex = 0;\r\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\r\n        var c = meta[a];\r\n        return typeof c === 'string' ? c :\r\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\r\n    }) + '\"' : '\"' + string + '\"';\r\n}\r\n\r\nfunction str(key, holder) {\r\n    // Produce a string from holder[key].\r\n    var i,          // The loop counter.\r\n        k,          // The member key.\r\n        v,          // The member value.\r\n        length,\r\n        mind = gap,\r\n        partial,\r\n        value = holder[key];\r\n    \r\n    // If the value has a toJSON method, call it to obtain a replacement value.\r\n    if (value && typeof value === 'object' &&\r\n            typeof value.toJSON === 'function') {\r\n        value = value.toJSON(key);\r\n    }\r\n    \r\n    // If we were called with a replacer function, then call the replacer to\r\n    // obtain a replacement value.\r\n    if (typeof rep === 'function') {\r\n        value = rep.call(holder, key, value);\r\n    }\r\n    \r\n    // What happens next depends on the value's type.\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return quote(value);\r\n        \r\n        case 'number':\r\n            // JSON numbers must be finite. Encode non-finite numbers as null.\r\n            return isFinite(value) ? String(value) : 'null';\r\n        \r\n        case 'boolean':\r\n        case 'null':\r\n            // If the value is a boolean or null, convert it to a string. Note:\r\n            // typeof null does not produce 'null'. The case is included here in\r\n            // the remote chance that this gets fixed someday.\r\n            return String(value);\r\n            \r\n        case 'object':\r\n            if (!value) return 'null';\r\n            gap += indent;\r\n            partial = [];\r\n            \r\n            // Array.isArray\r\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\r\n                length = value.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    partial[i] = str(i, value) || 'null';\r\n                }\r\n                \r\n                // Join all of the elements together, separated with commas, and\r\n                // wrap them in brackets.\r\n                v = partial.length === 0 ? '[]' : gap ?\r\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\r\n                    '[' + partial.join(',') + ']';\r\n                gap = mind;\r\n                return v;\r\n            }\r\n            \r\n            // If the replacer is an array, use it to select the members to be\r\n            // stringified.\r\n            if (rep && typeof rep === 'object') {\r\n                length = rep.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    k = rep[i];\r\n                    if (typeof k === 'string') {\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise, iterate through all of the keys in the object.\r\n                for (k in value) {\r\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n        // Join all of the member texts together, separated with commas,\r\n        // and wrap them in braces.\r\n\r\n        v = partial.length === 0 ? '{}' : gap ?\r\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\r\n            '{' + partial.join(',') + '}';\r\n        gap = mind;\r\n        return v;\r\n    }\r\n}\r\n\r\nmodule.exports = function (value, replacer, space) {\r\n    var i;\r\n    gap = '';\r\n    indent = '';\r\n    \r\n    // If the space parameter is a number, make an indent string containing that\r\n    // many spaces.\r\n    if (typeof space === 'number') {\r\n        for (i = 0; i < space; i += 1) {\r\n            indent += ' ';\r\n        }\r\n    }\r\n    // If the space parameter is a string, it will be used as the indent string.\r\n    else if (typeof space === 'string') {\r\n        indent = space;\r\n    }\r\n\r\n    // If there is a replacer, it must be a function or an array.\r\n    // Otherwise, throw an error.\r\n    rep = replacer;\r\n    if (replacer && typeof replacer !== 'function'\r\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\r\n        throw new Error('JSON.stringify');\r\n    }\r\n    \r\n    // Make a fake root object containing our value under the key of ''.\r\n    // Return the result of stringifying the value.\r\n    return str('', {'': value});\r\n};\r\n"]},"metadata":{},"sourceType":"script"}