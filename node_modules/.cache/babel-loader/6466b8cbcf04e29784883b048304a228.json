{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = asyncify;\n\nvar _isObject = require('lodash/isObject');\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _setImmediate = require('./internal/setImmediate');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\n\n\nfunction asyncify(func) {\n  return (0, _initialParams2.default)(function (args, callback) {\n    var result;\n\n    try {\n      result = func.apply(this, args);\n    } catch (e) {\n      return callback(e);\n    } // if result is Promise object\n\n\n    if ((0, _isObject2.default)(result) && typeof result.then === 'function') {\n      result.then(function (value) {\n        invokeCallback(callback, null, value);\n      }, function (err) {\n        invokeCallback(callback, err.message ? err : new Error(err));\n      });\n    } else {\n      callback(null, result);\n    }\n  });\n}\n\nfunction invokeCallback(callback, error, value) {\n  try {\n    callback(error, value);\n  } catch (e) {\n    (0, _setImmediate2.default)(rethrow, e);\n  }\n}\n\nfunction rethrow(error) {\n  throw error;\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["E:/Freelancing/blockchain/time-warriors-mint-page/node_modules/async/asyncify.js"],"names":["Object","defineProperty","exports","value","default","asyncify","_isObject","require","_isObject2","_interopRequireDefault","_initialParams","_initialParams2","_setImmediate","_setImmediate2","obj","__esModule","func","args","callback","result","apply","e","then","invokeCallback","err","message","Error","error","rethrow","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAD,CAAvC;;AAEA,IAAII,cAAc,GAAGH,OAAO,CAAC,0BAAD,CAA5B;;AAEA,IAAII,eAAe,GAAGF,sBAAsB,CAACC,cAAD,CAA5C;;AAEA,IAAIE,aAAa,GAAGL,OAAO,CAAC,yBAAD,CAA3B;;AAEA,IAAIM,cAAc,GAAGJ,sBAAsB,CAACG,aAAD,CAA3C;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEV,IAAAA,OAAO,EAAEU;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAST,QAAT,CAAkBW,IAAlB,EAAwB;AACpB,SAAO,CAAC,GAAGL,eAAe,CAACP,OAApB,EAA6B,UAAUa,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,QAAIC,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBH,IAAjB,CAAT;AACH,KAFD,CAEE,OAAOI,CAAP,EAAU;AACR,aAAOH,QAAQ,CAACG,CAAD,CAAf;AACH,KANyD,CAO1D;;;AACA,QAAI,CAAC,GAAGb,UAAU,CAACJ,OAAf,EAAwBe,MAAxB,KAAmC,OAAOA,MAAM,CAACG,IAAd,KAAuB,UAA9D,EAA0E;AACtEH,MAAAA,MAAM,CAACG,IAAP,CAAY,UAAUnB,KAAV,EAAiB;AACzBoB,QAAAA,cAAc,CAACL,QAAD,EAAW,IAAX,EAAiBf,KAAjB,CAAd;AACH,OAFD,EAEG,UAAUqB,GAAV,EAAe;AACdD,QAAAA,cAAc,CAACL,QAAD,EAAWM,GAAG,CAACC,OAAJ,GAAcD,GAAd,GAAoB,IAAIE,KAAJ,CAAUF,GAAV,CAA/B,CAAd;AACH,OAJD;AAKH,KAND,MAMO;AACHN,MAAAA,QAAQ,CAAC,IAAD,EAAOC,MAAP,CAAR;AACH;AACJ,GAjBM,CAAP;AAkBH;;AAED,SAASI,cAAT,CAAwBL,QAAxB,EAAkCS,KAAlC,EAAyCxB,KAAzC,EAAgD;AAC5C,MAAI;AACAe,IAAAA,QAAQ,CAACS,KAAD,EAAQxB,KAAR,CAAR;AACH,GAFD,CAEE,OAAOkB,CAAP,EAAU;AACR,KAAC,GAAGR,cAAc,CAACT,OAAnB,EAA4BwB,OAA5B,EAAqCP,CAArC;AACH;AACJ;;AAED,SAASO,OAAT,CAAiBD,KAAjB,EAAwB;AACpB,QAAMA,KAAN;AACH;;AACDE,MAAM,CAAC3B,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = asyncify;\r\n\r\nvar _isObject = require('lodash/isObject');\r\n\r\nvar _isObject2 = _interopRequireDefault(_isObject);\r\n\r\nvar _initialParams = require('./internal/initialParams');\r\n\r\nvar _initialParams2 = _interopRequireDefault(_initialParams);\r\n\r\nvar _setImmediate = require('./internal/setImmediate');\r\n\r\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\r\nfunction asyncify(func) {\r\n    return (0, _initialParams2.default)(function (args, callback) {\r\n        var result;\r\n        try {\r\n            result = func.apply(this, args);\r\n        } catch (e) {\r\n            return callback(e);\r\n        }\r\n        // if result is Promise object\r\n        if ((0, _isObject2.default)(result) && typeof result.then === 'function') {\r\n            result.then(function (value) {\r\n                invokeCallback(callback, null, value);\r\n            }, function (err) {\r\n                invokeCallback(callback, err.message ? err : new Error(err));\r\n            });\r\n        } else {\r\n            callback(null, result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction invokeCallback(callback, error, value) {\r\n    try {\r\n        callback(error, value);\r\n    } catch (e) {\r\n        (0, _setImmediate2.default)(rethrow, e);\r\n    }\r\n}\r\n\r\nfunction rethrow(error) {\r\n    throw error;\r\n}\r\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}