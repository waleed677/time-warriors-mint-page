{"ast":null,"code":"import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { makeJsonRpcPayloadFactory, makeJsonRpcSenders } from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport function makeAlchemyContext(url, config) {\n  var makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  var restSender = makeRestPayloadSender({\n    config: config,\n    url: url\n  });\n\n  if (/^https?:\\/\\//.test(url)) {\n    var alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n\n    var _a = makeJsonRpcPayloadSender(alchemySendJsonrRpc, config),\n        sendJsonRpcPayload = _a.sendJsonRpcPayload,\n        setWriteProvider = _a.setWriteProvider;\n\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + VERSION : undefined;\n    var ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor()\n    });\n    var alchemySend = makeWebSocketSender(ws);\n\n    var _b = makeJsonRpcPayloadSender(alchemySend, config),\n        sendJsonRpcPayload = _b.sendJsonRpcPayload,\n        setWriteProvider = _b.setWriteProvider;\n\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = new AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else {\n    throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n  }\n}\n\nfunction getWebSocketConstructor() {\n  return isNodeEnvironment() ? function (url, protocols) {\n    return new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n    });\n  } : WebSocket;\n}\n\nfunction isNodeEnvironment() {\n  return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\n\nfunction isAlchemyUrl(url) {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}","map":{"version":3,"sources":["../../../src/web3-adapter/alchemyContext.ts"],"names":[],"mappings":"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","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makeJsonRpcPayloadFactory,\n  makeJsonRpcSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender, RestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  restSender: RestPayloadSender;\n  jsonRpcSenders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  const restSender = makeRestPayloadSender({\n    config,\n    url,\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySendJsonrRpc,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySend,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = new AlchemyWebSocketProvider(\n      ws,\n      sendJsonRpcPayload,\n      jsonRpcSenders,\n    );\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}