{"ast":null,"code":"var queryString = require('query-string');\n\nvar setQuery = require('url-set-query');\n\nvar assign = require('object-assign');\n\nvar ensureHeader = require('./lib/ensure-header.js'); // this is replaced in the browser\n\n\nvar request = require('./lib/request.js');\n\nvar mimeTypeJson = 'application/json';\n\nvar noop = function () {};\n\nmodule.exports = xhrRequest;\n\nfunction xhrRequest(url, opt, cb) {\n  if (!url || typeof url !== 'string') {\n    throw new TypeError('must specify a URL');\n  }\n\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n\n  if (cb && typeof cb !== 'function') {\n    throw new TypeError('expected cb to be undefined or a function');\n  }\n\n  cb = cb || noop;\n  opt = opt || {};\n  var defaultResponse = opt.json ? 'json' : 'text';\n  opt = assign({\n    responseType: defaultResponse\n  }, opt);\n  var headers = opt.headers || {};\n  var method = (opt.method || 'GET').toUpperCase();\n  var query = opt.query;\n\n  if (query) {\n    if (typeof query !== 'string') {\n      query = queryString.stringify(query);\n    }\n\n    url = setQuery(url, query);\n  } // allow json response\n\n\n  if (opt.responseType === 'json') {\n    ensureHeader(headers, 'Accept', mimeTypeJson);\n  } // if body content is json\n\n\n  if (opt.json && method !== 'GET' && method !== 'HEAD') {\n    ensureHeader(headers, 'Content-Type', mimeTypeJson);\n    opt.body = JSON.stringify(opt.body);\n  }\n\n  opt.method = method;\n  opt.url = url;\n  opt.headers = headers;\n  delete opt.query;\n  delete opt.json;\n  return request(opt, cb);\n}","map":{"version":3,"sources":["E:/Freelancing/blockchain/time-warriors-mint-page/node_modules/xhr-request/index.js"],"names":["queryString","require","setQuery","assign","ensureHeader","request","mimeTypeJson","noop","module","exports","xhrRequest","url","opt","cb","TypeError","defaultResponse","json","responseType","headers","method","toUpperCase","query","stringify","body","JSON"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,wBAAD,CAA1B,C,CAEA;;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIK,YAAY,GAAG,kBAAnB;;AACA,IAAIC,IAAI,GAAG,YAAY,CAAE,CAAzB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AACA,SAASA,UAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,EAA/B,EAAmC;AACjC,MAAI,CAACF,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACnC,UAAM,IAAIG,SAAJ,CAAc,oBAAd,CAAN;AACD;;AACD,MAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;AAC7BC,IAAAA,EAAE,GAAGD,GAAL;AACAA,IAAAA,GAAG,GAAG,EAAN;AACD;;AACD,MAAIC,EAAE,IAAI,OAAOA,EAAP,KAAc,UAAxB,EAAoC;AAClC,UAAM,IAAIC,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAEDD,EAAAA,EAAE,GAAGA,EAAE,IAAIN,IAAX;AACAK,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAIG,eAAe,GAAGH,GAAG,CAACI,IAAJ,GAAW,MAAX,GAAoB,MAA1C;AACAJ,EAAAA,GAAG,GAAGT,MAAM,CAAC;AAAEc,IAAAA,YAAY,EAAEF;AAAhB,GAAD,EAAoCH,GAApC,CAAZ;AAEA,MAAIM,OAAO,GAAGN,GAAG,CAACM,OAAJ,IAAe,EAA7B;AACA,MAAIC,MAAM,GAAG,CAACP,GAAG,CAACO,MAAJ,IAAc,KAAf,EAAsBC,WAAtB,EAAb;AACA,MAAIC,KAAK,GAAGT,GAAG,CAACS,KAAhB;;AACA,MAAIA,KAAJ,EAAW;AACT,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,MAAAA,KAAK,GAAGrB,WAAW,CAACsB,SAAZ,CAAsBD,KAAtB,CAAR;AACD;;AACDV,IAAAA,GAAG,GAAGT,QAAQ,CAACS,GAAD,EAAMU,KAAN,CAAd;AACD,GA1BgC,CA4BjC;;;AACA,MAAIT,GAAG,CAACK,YAAJ,KAAqB,MAAzB,EAAiC;AAC/Bb,IAAAA,YAAY,CAACc,OAAD,EAAU,QAAV,EAAoBZ,YAApB,CAAZ;AACD,GA/BgC,CAiCjC;;;AACA,MAAIM,GAAG,CAACI,IAAJ,IAAYG,MAAM,KAAK,KAAvB,IAAgCA,MAAM,KAAK,MAA/C,EAAuD;AACrDf,IAAAA,YAAY,CAACc,OAAD,EAAU,cAAV,EAA0BZ,YAA1B,CAAZ;AACAM,IAAAA,GAAG,CAACW,IAAJ,GAAWC,IAAI,CAACF,SAAL,CAAeV,GAAG,CAACW,IAAnB,CAAX;AACD;;AAEDX,EAAAA,GAAG,CAACO,MAAJ,GAAaA,MAAb;AACAP,EAAAA,GAAG,CAACD,GAAJ,GAAUA,GAAV;AACAC,EAAAA,GAAG,CAACM,OAAJ,GAAcA,OAAd;AACA,SAAON,GAAG,CAACS,KAAX;AACA,SAAOT,GAAG,CAACI,IAAX;AAEA,SAAOX,OAAO,CAACO,GAAD,EAAMC,EAAN,CAAd;AACD","sourcesContent":["var queryString = require('query-string')\r\nvar setQuery = require('url-set-query')\r\nvar assign = require('object-assign')\r\nvar ensureHeader = require('./lib/ensure-header.js')\r\n\r\n// this is replaced in the browser\r\nvar request = require('./lib/request.js')\r\n\r\nvar mimeTypeJson = 'application/json'\r\nvar noop = function () {}\r\n\r\nmodule.exports = xhrRequest\r\nfunction xhrRequest (url, opt, cb) {\r\n  if (!url || typeof url !== 'string') {\r\n    throw new TypeError('must specify a URL')\r\n  }\r\n  if (typeof opt === 'function') {\r\n    cb = opt\r\n    opt = {}\r\n  }\r\n  if (cb && typeof cb !== 'function') {\r\n    throw new TypeError('expected cb to be undefined or a function')\r\n  }\r\n\r\n  cb = cb || noop\r\n  opt = opt || {}\r\n\r\n  var defaultResponse = opt.json ? 'json' : 'text'\r\n  opt = assign({ responseType: defaultResponse }, opt)\r\n\r\n  var headers = opt.headers || {}\r\n  var method = (opt.method || 'GET').toUpperCase()\r\n  var query = opt.query\r\n  if (query) {\r\n    if (typeof query !== 'string') {\r\n      query = queryString.stringify(query)\r\n    }\r\n    url = setQuery(url, query)\r\n  }\r\n\r\n  // allow json response\r\n  if (opt.responseType === 'json') {\r\n    ensureHeader(headers, 'Accept', mimeTypeJson)\r\n  }\r\n\r\n  // if body content is json\r\n  if (opt.json && method !== 'GET' && method !== 'HEAD') {\r\n    ensureHeader(headers, 'Content-Type', mimeTypeJson)\r\n    opt.body = JSON.stringify(opt.body)\r\n  }\r\n\r\n  opt.method = method\r\n  opt.url = url\r\n  opt.headers = headers\r\n  delete opt.query\r\n  delete opt.json\r\n\r\n  return request(opt, cb)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}