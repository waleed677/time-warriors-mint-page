{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Base = void 0;\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nclass Base {\n  /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */\n  print() {\n    Base.print(this);\n  }\n  /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */\n\n\n  _bufferIndexOf(array, element) {\n    for (let i = 0; i < array.length; i++) {\n      if (element.equals(array[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */\n\n\n  static bufferify(value) {\n    if (!Buffer.isBuffer(value)) {\n      // crypto-js support\n      if (typeof value === 'object' && value.words) {\n        return Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n      } else if (Base.isHexString(value)) {\n        return Buffer.from(value.replace(/^0x/, ''), 'hex');\n      } else if (typeof value === 'string') {\n        return Buffer.from(value);\n      } else if (typeof value === 'number') {\n        let s = value.toString();\n\n        if (s.length % 2) {\n          s = `0${s}`;\n        }\n\n        return Buffer.from(s, 'hex');\n      } else if (ArrayBuffer.isView(value)) {\n        return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n      }\n    }\n\n    return value;\n  }\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n\n\n  static isHexString(v) {\n    return typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n  /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */\n\n\n  static print(tree) {\n    console.log(tree.toString());\n  }\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n\n\n  bufferToHex(value, withPrefix = true) {\n    return Base.bufferToHex(value, withPrefix);\n  }\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n\n\n  static bufferToHex(value, withPrefix = true) {\n    return `${withPrefix ? '0x' : ''}${(value || Buffer.alloc(0)).toString('hex')}`;\n  }\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */\n\n\n  bufferify(value) {\n    return Base.bufferify(value);\n  }\n  /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */\n\n\n  bufferifyFn(f) {\n    return value => {\n      const v = f(value);\n\n      if (Buffer.isBuffer(v)) {\n        return v;\n      }\n\n      if (this._isHexString(v)) {\n        return Buffer.from(v.replace('0x', ''), 'hex');\n      }\n\n      if (typeof v === 'string') {\n        return Buffer.from(v);\n      }\n\n      if (ArrayBuffer.isView(v)) {\n        return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n      } // crypto-js support\n\n\n      return Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n    };\n  }\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n\n\n  _isHexString(value) {\n    return Base.isHexString(value);\n  }\n  /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */\n\n\n  _log2(n) {\n    return n === 1 ? 0 : 1 + this._log2(n / 2 | 0);\n  }\n  /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */\n\n\n  _zip(a, b) {\n    return a.map((e, i) => [e, b[i]]);\n  }\n\n}\n\nexports.Base = Base;\nexports.default = Base;","map":{"version":3,"sources":["/home/waleed/Desktop/MintWebsites/metaverse/node_modules/merkletreejs/dist/Base.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Base","crypto_js_1","require","print","_bufferIndexOf","array","element","i","length","equals","bufferify","Buffer","isBuffer","words","from","toString","default","enc","Hex","isHexString","replace","s","ArrayBuffer","isView","buffer","byteOffset","byteLength","v","test","tree","console","log","bufferToHex","withPrefix","alloc","bufferifyFn","f","_isHexString","parse","_log2","n","_zip","a","b","map","e"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = void 0;\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nclass Base {\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    print() {\n        Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n    _bufferIndexOf(array, element) {\n        for (let i = 0; i < array.length; i++) {\n            if (element.equals(array[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n    static bufferify(value) {\n        if (!Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === 'object' && value.words) {\n                return Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n            }\n            else if (Base.isHexString(value)) {\n                return Buffer.from(value.replace(/^0x/, ''), 'hex');\n            }\n            else if (typeof value === 'string') {\n                return Buffer.from(value);\n            }\n            else if (typeof value === 'number') {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return Buffer.from(s, 'hex');\n            }\n            else if (ArrayBuffer.isView(value)) {\n                return Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    static isHexString(v) {\n        return (typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v));\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n    static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    bufferToHex(value, withPrefix = true) {\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    static bufferToHex(value, withPrefix = true) {\n        return `${withPrefix ? '0x' : ''}${(value || Buffer.alloc(0)).toString('hex')}`;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n    bufferifyFn(f) {\n        return (value) => {\n            const v = f(value);\n            if (Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this._isHexString(v)) {\n                return Buffer.from(v.replace('0x', ''), 'hex');\n            }\n            if (typeof v === 'string') {\n                return Buffer.from(v);\n            }\n            if (ArrayBuffer.isView(v)) {\n                return Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            return Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n        };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    _isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n    _log2(n) {\n        return n === 1 ? 0 : 1 + this._log2((n / 2) | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n    _zip(a, b) {\n        return a.map((e, i) => [e, b[i]]);\n    }\n}\nexports.Base = Base;\nexports.default = Base;\n"]},"metadata":{},"sourceType":"script"}