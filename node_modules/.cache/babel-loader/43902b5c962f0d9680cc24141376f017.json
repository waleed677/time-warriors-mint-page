{"ast":null,"code":"'use strict';\n\nfunction withIs(Class, {\n  className,\n  symbolName\n}) {\n  const symbol = Symbol.for(symbolName);\n  const ClassIsWrapper = {\n    // The code below assigns the class wrapper to an object to trick\n    // JavaScript engines to show the name of the extended class when\n    // logging an instances.\n    // We are assigning an anonymous class (class wrapper) to the object\n    // with key `className` to keep the correct name.\n    // If this is not supported it falls back to logging `ClassIsWrapper`.\n    [className]: class extends Class {\n      constructor(...args) {\n        super(...args);\n        Object.defineProperty(this, symbol, {\n          value: true\n        });\n      }\n\n      get [Symbol.toStringTag]() {\n        return className;\n      }\n\n    }\n  }[className];\n\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n\n  return ClassIsWrapper;\n}\n\nfunction withIsProto(Class, {\n  className,\n  symbolName,\n  withoutNew\n}) {\n  const symbol = Symbol.for(symbolName);\n  /* eslint-disable object-shorthand */\n\n  const ClassIsWrapper = {\n    [className]: function (...args) {\n      if (withoutNew && !(this instanceof ClassIsWrapper)) {\n        return new ClassIsWrapper(...args);\n      }\n\n      const _this = Class.call(this, ...args) || this;\n\n      if (_this && !_this[symbol]) {\n        Object.defineProperty(_this, symbol, {\n          value: true\n        });\n      }\n\n      return _this;\n    }\n  }[className];\n  /* eslint-enable object-shorthand */\n\n  ClassIsWrapper.prototype = Object.create(Class.prototype);\n  ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n    get() {\n      return className;\n    }\n\n  });\n\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n\n  return ClassIsWrapper;\n}\n\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;","map":{"version":3,"sources":["E:/Freelancing/blockchain/time-warriors-mint-page/node_modules/class-is/index.js"],"names":["withIs","Class","className","symbolName","symbol","Symbol","for","ClassIsWrapper","constructor","args","Object","defineProperty","value","toStringTag","obj","withIsProto","withoutNew","_this","call","prototype","create","get","module","exports","proto"],"mappings":"AAAA;;AAEA,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAvB,EAAkD;AAC9C,QAAMC,MAAM,GAAGC,MAAM,CAACC,GAAP,CAAWH,UAAX,CAAf;AAEA,QAAMI,cAAc,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,KAACL,SAAD,GAAa,cAAcD,KAAd,CAAoB;AAC7BO,MAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACjB,cAAM,GAAGA,IAAT;AACAC,QAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BP,MAA5B,EAAoC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAApC;AACH;;AAEsB,WAAlBP,MAAM,CAACQ,WAAW,IAAI;AACvB,eAAOX,SAAP;AACH;;AAR4B;AAPd,IAiBrBA,SAjBqB,CAAvB;;AAmBAK,EAAAA,cAAc,CAAE,KAAIL,SAAU,EAAhB,CAAd,GAAoCY,GAAD,IAAS,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACV,MAAD,CAAZ,CAA7C;;AAEA,SAAOG,cAAP;AACH;;AAED,SAASQ,WAAT,CAAqBd,KAArB,EAA4B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBa,EAAAA;AAAzB,CAA5B,EAAmE;AAC/D,QAAMZ,MAAM,GAAGC,MAAM,CAACC,GAAP,CAAWH,UAAX,CAAf;AAEA;;AACA,QAAMI,cAAc,GAAG;AACnB,KAACL,SAAD,GAAa,UAAU,GAAGO,IAAb,EAAmB;AAC5B,UAAIO,UAAU,IAAI,EAAE,gBAAgBT,cAAlB,CAAlB,EAAqD;AACjD,eAAO,IAAIA,cAAJ,CAAmB,GAAGE,IAAtB,CAAP;AACH;;AAED,YAAMQ,KAAK,GAAGhB,KAAK,CAACiB,IAAN,CAAW,IAAX,EAAiB,GAAGT,IAApB,KAA6B,IAA3C;;AAEA,UAAIQ,KAAK,IAAI,CAACA,KAAK,CAACb,MAAD,CAAnB,EAA6B;AACzBM,QAAAA,MAAM,CAACC,cAAP,CAAsBM,KAAtB,EAA6Bb,MAA7B,EAAqC;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAArC;AACH;;AAED,aAAOK,KAAP;AACH;AAbkB,IAcrBf,SAdqB,CAAvB;AAeA;;AAEAK,EAAAA,cAAc,CAACY,SAAf,GAA2BT,MAAM,CAACU,MAAP,CAAcnB,KAAK,CAACkB,SAApB,CAA3B;AACAZ,EAAAA,cAAc,CAACY,SAAf,CAAyBX,WAAzB,GAAuCD,cAAvC;AAEAG,EAAAA,MAAM,CAACC,cAAP,CAAsBJ,cAAc,CAACY,SAArC,EAAgDd,MAAM,CAACQ,WAAvD,EAAoE;AAChEQ,IAAAA,GAAG,GAAG;AACF,aAAOnB,SAAP;AACH;;AAH+D,GAApE;;AAMAK,EAAAA,cAAc,CAAE,KAAIL,SAAU,EAAhB,CAAd,GAAoCY,GAAD,IAAS,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACV,MAAD,CAAZ,CAA7C;;AAEA,SAAOG,cAAP;AACH;;AAEDe,MAAM,CAACC,OAAP,GAAiBvB,MAAjB;AACAsB,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuBT,WAAvB","sourcesContent":["'use strict';\r\n\r\nfunction withIs(Class, { className, symbolName }) {\r\n    const symbol = Symbol.for(symbolName);\r\n\r\n    const ClassIsWrapper = {\r\n        // The code below assigns the class wrapper to an object to trick\r\n        // JavaScript engines to show the name of the extended class when\r\n        // logging an instances.\r\n        // We are assigning an anonymous class (class wrapper) to the object\r\n        // with key `className` to keep the correct name.\r\n        // If this is not supported it falls back to logging `ClassIsWrapper`.\r\n        [className]: class extends Class {\r\n            constructor(...args) {\r\n                super(...args);\r\n                Object.defineProperty(this, symbol, { value: true });\r\n            }\r\n\r\n            get [Symbol.toStringTag]() {\r\n                return className;\r\n            }\r\n        },\r\n    }[className];\r\n\r\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\r\n\r\n    return ClassIsWrapper;\r\n}\r\n\r\nfunction withIsProto(Class, { className, symbolName, withoutNew }) {\r\n    const symbol = Symbol.for(symbolName);\r\n\r\n    /* eslint-disable object-shorthand */\r\n    const ClassIsWrapper = {\r\n        [className]: function (...args) {\r\n            if (withoutNew && !(this instanceof ClassIsWrapper)) {\r\n                return new ClassIsWrapper(...args);\r\n            }\r\n\r\n            const _this = Class.call(this, ...args) || this;\r\n\r\n            if (_this && !_this[symbol]) {\r\n                Object.defineProperty(_this, symbol, { value: true });\r\n            }\r\n\r\n            return _this;\r\n        },\r\n    }[className];\r\n    /* eslint-enable object-shorthand */\r\n\r\n    ClassIsWrapper.prototype = Object.create(Class.prototype);\r\n    ClassIsWrapper.prototype.constructor = ClassIsWrapper;\r\n\r\n    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\r\n        get() {\r\n            return className;\r\n        },\r\n    });\r\n\r\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\r\n\r\n    return ClassIsWrapper;\r\n}\r\n\r\nmodule.exports = withIs;\r\nmodule.exports.proto = withIsProto;\r\n"]},"metadata":{},"sourceType":"script"}